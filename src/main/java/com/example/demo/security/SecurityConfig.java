package com.example.demo.security;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource())) //Báº­t CORS
            .csrf(csrf -> csrf.disable())  // Váº«n giá»¯ táº¯t CSRF
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/api/auth/**").permitAll()  // Cho phÃ©p táº¥t cáº£ yÃªu cáº§u Ä‘áº¿n API auth
                .requestMatchers("/api/responses/**").permitAll() //  Má»Ÿ API kháº£o sÃ¡t
                .requestMatchers("/api/reports/**").permitAll() //  Má»Ÿ API thá»‘ng kÃª
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()// Má»Ÿ Swagger
                .anyRequest().authenticated())  // CÃ¡c request khÃ¡c cáº§n authentication
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS))  // KhÃ´ng lÆ°u session
            .httpBasic(httpBasic -> httpBasic.disable())  // Táº¯t xÃ¡c thá»±c HTTP Basic
            .formLogin(form -> form.disable()); // Táº¯t form login máº·c Ä‘á»‹nh cá»§a Spring Security

        return http.build();
    }

    // Cáº¥u hÃ¬nh CORS Ä‘á»ƒ cho phÃ©p frontend truy cáº­p API
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://127.0.0.1:5500", "http://localhost:5500")); // ðŸš€ ThÃªm domain frontend
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(List.of("*"));
        configuration.setAllowCredentials(true); // Há»— trá»£ gá»­i cookie/token náº¿u cáº§n

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
